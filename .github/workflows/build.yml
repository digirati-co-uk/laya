name: Build artifacts

on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-containers:
    name: "${{ matrix.build_configuration.name }}"
    runs-on: "${{ matrix.build_configuration.runner || 'ubuntu-latest' }}"
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ matrix.build_configuration.name }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        build_configuration:
          - platform: linux/amd64
            triple: x86_64-unknown-linux-gnu
            cpu: x86-64-v3
            name: x64-generic
            generic: true
            runner: ubuntu-latest

#          - platform: linux/arm64/v8
#            triple: aarch64-unknown-linux-gnu
#            cpu: neoverse-v1
#            name: arm64-generic
#            generic: true

          - platform: linux/amd64
            triple: x86_64-unknown-linux-gnu
            cpu: znver4
            name: amd-zen4
            generic: false

          - platform: linux/amd64
            triple: x86_64-unknown-linux-gnu
            cpu: sapphirerapids
            name: intel-xeon-gen4
            generic: false

#          - platform: linux/arm64/v8
#            triple: aarch64-unknown-linux-gnu
#            cpu: neoverse-v2
#            name: aws-graviton4
#            generic: false

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.build_configuration.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            # tag event
            type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
            # pull request event
            type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr
          labels: |
            target-cpu=${{ matrix.build_configuration.cpu }}
            target-triple=${{ matrix.build_configuration.triple }}
          flavor: |
            latest=auto
            prefix=
            suffix=${{ matrix.build_configuration.generic == false && format('-{0}', matrix.build_configuration.name) || '' }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push generic image digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.build_configuration.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            TARGET=${{ matrix.build_configuration.triple }}
            TARGET_CPU=${{ matrix.build_configuration.cpu }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: matrix.build_configuration.generic == true

      - name: Build and push platform specific image
        uses: docker/build-push-action@v6
        id: build_platform_specific
        with:
          platforms: ${{ matrix.build_configuration.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          build-args: |
            TARGET=${{ matrix.build_configuration.triple }}
            TARGET_CPU=${{ matrix.build_configuration.cpu }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: matrix.build_configuration.generic == false

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest || steps.build_platform_specific.outputs.digest }}
          push-to-registry: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
        if: matrix.build_configuration.generic == true

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.build_configuration.name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
        if: matrix.build_configuration.generic == true
  merge:
    name: Merge generic manifests
    runs-on: ubuntu-latest
    needs:
      - build-containers
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            # tag event
            type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
            # pull request event
            type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr
          labels: |
            target-cpu=${{ matrix.build_configuration.cpu }}
            target-triple=${{ matrix.build_configuration.triple }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}