name: Build artifacts

on:
  push:
    branches:
      - main
  release:

env:
  REGISTRY: 167865917244.dkr.ecr.eu-west-1.amazonaws.com
  IMAGE_NAME: dlcsspinup-laya
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTUP_MAX_RETRIES: 10
  KDU_ROOT: ${{ github.workspace }}/kakadu
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: "Create build plan"
    runs-on: ubuntu-24.04
    outputs:
      native-distributions: ${{ steps.plan.outputs.native_distributions }}
      version: ${{ steps.version.outputs.version }}
      cargo_token: ${{ steps.cargo_token.outputs.token }}
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          persist-credentials: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::167865917244:role/Delegated_DLCSDev_GitHubActions_CI_retags
          aws-region: eu-west-1

      - id: cargo_token
        run: |
          token=$(aws codeartifact get-authorization-token --domain dlcs-spinup --domain-owner 167865917244 --region eu-west-1 --query authorizationToken --output text)
          echo "token=$token" >> $GITHUB_OUTPUT

      - id: plan
        env:
          CARGO_REGISTRIES_DLCS_TOKEN: ${{ steps.cargo_token.outputs.token }}
        run: |
          native_distributions=$(cargo metadata --format-version=1 | jq -c '.metadata.distributions')
          echo "native_distributions=$native_distributions" >> "$GITHUB_OUTPUT"
      - id: version
        run: echo "version=$(cargo pkgid | cut -d '@' -f2)" >> $GITHUB_OUTPUT

  build-native:
    needs: plan
    name: "${{ matrix.name }} (Native)"
    runs-on: "${{ matrix.runner || 'ubuntu-24.04' }}"
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      CARGO_REGISTRIES_DLCS_TOKEN: ${{ needs.plan.outputs.cargo_token }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.plan.outputs.native-distributions) }}
    steps:
      - name: Install buildah
        run: sudo apt install -y buildah
        if: endsWith(matrix.runner, 'arm')

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          persist-credentials: true

      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.KAKADU_SSH_KEY }}
          repository: digirati-co-uk/kakadu
          path: kakadu

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::167865917244:role/Delegated_DLCSDev_GitHubActions_CI_retags
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "167865917244"
      - run: |
          buildah login \
            -u "${{ steps.login-ecr.outputs.docker_username_167865917244_dkr_ecr_eu_west_1_amazonaws_com }}" \
            -p "${{ steps.login-ecr.outputs.docker_password_167865917244_dkr_ecr_eu_west_1_amazonaws_com }}" \
            ${{ env.REGISTRY }}

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ matrix.runner || 'ubuntu-24.04' }}"
          cache-on-failure: true
          cache-targets: true

      - name: Build
        run: |
          mkdir artifacts
          cargo build --target ${{ matrix.triple }} --release --bin laya
          cp target/${{ matrix.triple }}/release/laya artifacts/laya-${{ matrix.name }}
        env:
          TARGET_CPU: ${{ matrix.cpu }}
          RUSTFLAGS: "-Ctarget-cpu=${{ matrix.cpu }} -Ctarget-feature=+crt-static"

      - name: Create OCI container
        id: build
        run: |
          container=$(buildah from --platform ${{ matrix.docker }} scratch)
          buildah copy $container target/${{ matrix.triple }}/release/laya /bin/laya
          buildah config --entrypoint '["/bin/laya"]' $container

          image=$(buildah commit $container)
          buildah push --digestfile=/tmp/digest $image docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

          digest=$(</tmp/digest)
          echo "digest=$digest" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-container-manifests:
    name: Merge Docker manifests
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
    needs:
      - build-native
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::167865917244:role/Delegated_DLCSDev_GitHubActions_CI_retags
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            # tag event
            type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
            # pull request event
            type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
